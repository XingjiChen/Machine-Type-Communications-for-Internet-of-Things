#include "example_gatt_service.h"

#include <iostream>
#include <memory>

/**
 * @brief Characteristics UUIDs generated by https://www.uuidgenerator.net/
 *
 */
const char *example_service_characteristics_uuids[] = {"6a7a0839-a67d-4fb9-ac5d-65f2843d5250",
													   "8cc6f2b4-a06e-4905-bfb7-0eb93889bfe6",
													   "02f4685a-a39e-481d-b932-1129012be897"};
/**
 * @brief Service UUID generated by https://www.uuidgenerator.net/
 *
 */
const char *example_service_uuid = "10ffbbdf-15eb-4a3c-9a12-3391bc95a127";
/**
 * @brief The characteristics user descriptions
 *
 */
const char *example_service_characteristic_descriptions[] = {"LED2", "DummyConfig", "TickCount"};

void CExampleGattService::updateTickCount() {
    //uint64_t tick_count = rtos::Kernel::Clock::now().time_since_epoch().count();
    uint64_t tick_count = Kernel::Clock::now().time_since_epoch().count();
    // TODO:: Implement this functions
	// 1. Convert the value to uint32_t
    _tick_count = static_cast<uint32_t>(tick_count);
	// 2. set the value of TickCount characteristic using static CExampleGattService::setCharacteristicValue
    setCharacteristicValue(*_characteristics[_characteristic_tick_count_index], _tick_count);
}

CExampleGattService::CExampleGattService(EventQueue &event_queue, PinName led_pin)
	: _event_queue(event_queue), _led(led_pin), _led_value(1), _tick_count(0), _dummy_config(0) {
	// TODO:: Implement this functions

	// these indices also define the order of adding the characteristics
	_characteristic_led_index = 0;
	_characteristic_dummy_config_index = 1;
	_characteristic_tick_count_index = 2;

	// 1. add characteristics to this service
	//    i. Add LED characteristic to index 0.
	//       Assert that addCharacteristic function returns true
    //uint8_t _led_value_array;
    //_led_value_array = _led_value & 0xFF;
    
    bool ledAdded = addCharacteristic(
    example_service_characteristics_uuids[_characteristic_led_index],
    GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_READ | GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_WRITE,
    // | GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_AUTHENTICATED_SIGNED_WRITES,
    example_service_characteristic_descriptions[_characteristic_led_index],
    &_led_value, 1
    );
    if(ledAdded)
        std::cout << "LED Characteristic added with authentication for write" << std::endl;
 
    //    ii. Add DummyConfig characteristic to index 1.
	//       Assert that addCharacteristic function returns true

    uint8_t dummyArray;
    dummyArray = _dummy_config & 0xFF;

    bool dummyConfigAdded = addCharacteristic(
        example_service_characteristics_uuids[_characteristic_dummy_config_index],
        GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_READ | GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_WRITE, 
        //GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_AUTHENTICATED_SIGNED_WRITES,
        example_service_characteristic_descriptions[_characteristic_dummy_config_index],
        &dummyArray, 1
    );
    if(dummyConfigAdded)
        std::cout << "Dummy Config Characteristic added with authentication for write" << std::endl;


    //    iii. Add TickCount characteristic to index 0.
	//       Assert that addCharacteristic function returns true
    
    uint8_t tickCountArray[4];
    tickCountArray[0] = (_tick_count >> 24) & 0xFF;
    tickCountArray[1] = (_tick_count >> 16) & 0xFF;
    tickCountArray[2] = (_tick_count >> 8) & 0xFF;
    tickCountArray[3] = _tick_count & 0xFF;
    
    bool tickCountAdded = addCharacteristic(
        example_service_characteristics_uuids[_characteristic_tick_count_index],
        GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_READ | GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_INDICATE | GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_AUTHENTICATED_SIGNED_WRITES,
        example_service_characteristic_descriptions[_characteristic_tick_count_index],
        tickCountArray, 4
    );
    if(tickCountAdded)
        std::cout << "Tick Count Characteristic added with authentication for updates" << std::endl;
    
	// 2. Turn off the LED
    _led = 1;
	// 3. create this service and assert the return value.
    _service.reset(new GattService(UUID(example_service_uuid), _characteristics.data(), _characteristics.size()));
    if(_service != nullptr)
	    std::cout << "ExampleGattService created" << std::endl;
}

CExampleGattService::~CExampleGattService() {}

void CExampleGattService::onDataWrittenHandler(GattCharacteristic *characteristic,
											   const uint8_t *data,
											   uint16_t size) {
	// TODO:: Implement this functions
	int characteristic_index = -1;
	// 1. find the index of the characteristic by iterating over _characteristics and
	//    using pointer comparison operators
	for (size_t i = 0; i < _characteristics.size(); ++i) {
        if (_characteristics[i] == characteristic) {
            characteristic_index = i;
            break;
        }
    }
	// perform the specified operations if the found index has certain value
	if (characteristic_index == -1) {
		return;
	}

	if (characteristic_index == _characteristic_led_index) {
		// Copy the minimum of the data size and the size of _led_value.
		size_t copy_size = fmin(size, sizeof(_led_value));
		// Assume _led_value is a uint8_t, adjust if it's of a different type.
		memcpy(&_led_value, data, copy_size);

		std::cout << "LED value written: " << int(_led_value) << std::endl;

		// Change LED state based on the _led_value.
		if (_led_value % 2 == 0) {
			// If _led_value is even, turn on the LED.
			_led = 0;
			std::cout << "LED2 is turned ON" << std::endl;
		} else {
			// If _led_value is odd, turn off the LED.
			_led = 1;
			std::cout << "LED2 is turned OFF" << std::endl;
		}
	}

	if (characteristic_index == _characteristic_dummy_config_index) {
		size_t copy_size = fmin(size, sizeof(_dummy_config));
		memcpy(&_dummy_config, data, copy_size);
        std::cout << "DummyConfig value: " << (_dummy_config) << std::endl;
	}

	if (characteristic_index == _characteristic_tick_count_index) {
        // size_t copy_size = fmin(size, sizeof(_led_value));
		std::cout << "TickCount modified -- ERROR--" << std::endl;
		return;
	}
}

void CExampleGattService::registerService(ble::BLE &ble) {
	CGattService::registerService(ble);
	// TODO: implement this function
	std::cout << "Registering ExampleGattService-" << std::endl;
	// 1. Configure the EventQueue to update the tick count using CExampleGattServer::updateTickCount function
	//    every second
	_event_queue.call_every(1000ms, callback(this, &CExampleGattService::updateTickCount));
}
